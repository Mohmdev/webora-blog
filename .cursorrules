# Webora Blog - Advanced Content Management Platform

Enterprise-grade blog management platform for content creation, user engagement, and publishing operations.

## PROJECT DESCRIPTION

Webora Blog is a full stack blog management system that allows its users to create, manage, and publish blog content and everything related to an enterprise blogging business. It provides a comprehensive set of features for content management, including post creation, category organization, user comments, analytics, and more.

## Core Functionalities

- Content Management
- Post Publishing & Scheduling
- Category & Tag Organization
- Comment Management
- User Engagement Analytics
- Author Management
- Role-based Access Control
- Integration with Third-Party Services
- Multi-tenancy
- Scalable Architecture
- API Layer for all the data
- Customizable Frontend through the Admin Dashboard

## Key Characteristics

- Payload CMS v3 ( aka **Payload** ) as the Headless CMS
- Next.js 15 App Router as the React Framework

> Note
>
> Frontend and Backend are united with each other in a single repository. 
> This is all done in a single running Nextjs instance and is possible because Payload as a Headless CMS is built on top of Nextjs and is fully integrated with it.
> - Admin Dashboard's route group is accessible at `site.com/admin` and is located at `/src/app/(payload)/admin/`. We dont modify this route group. Instead we customize the backend and or admin dashboard through configurations that get injected into the Payload Client.
> - Frontend's route group is accessible at `site.com` and is located at `/src/app/(frontend)/`

## Technologies

### Stack Technologies

- `Node.js 22` as runtime
- `pnpm` as the Package Manager
- `TypeScript v5.7.3`
- `Vercel` as the Deployment Platform
- `Vercel Postgres` as Database
- `Vercel Blob` as Storage
- `Tailwind CSS v4` for styling

### Backend

- Fully typed with TypeScript. Because Payload supports TypeScript natively, and not only that, the entirety of the CMS is built with TypeScript.
- The backend itself runs with Next.js managed by Payload
- API Layer is generated by Next.js managed by Payload
- Vercel Postgres
- Vercel Blob

### Frontend

- Next.js 15 App Router [@app/(frontend)/page.tsx](./src/app/(frontend)/page.tsx)
- `Tailwind CSS v4`; v4 has depricated tailwind.config for native integration in [`globals.css`](./src/styles/frontend/globals.css). This allows to write native css and or tailwind css in the file and have it compiled by the Tailwind CSS compiler.
- Shadcn UI [`components`](./src/components/ui)
- Lucid
- Motion Reach `motion/react` which is the rebranded version of `framer-motion`

### Providers

- `Theme Provider` [@providers/Theme](./src/providers/Theme/index.tsx)
- `Header Theme Provider` [@providers/HeaderTheme](./src/providers/HeaderTheme/index.tsx)
- `Authentication` with RBAC managed Internally by Payload through the "Users" collection [`config`](./src/services/authentication/Users/config.ts)

## AI AGENT ROLE

- You are a senior software engineer with great experience in TypeScript, Nextjs, Payloadcms, Tailwind CSS, and Shadcn UI.
- As a senior software engineer, you are responsible for writing the code that powers the frontend and backend of the project.
- You should remember that the project you are working on is a blog management system.
- As the business logic is to manage blog content, you should be familiar with blogging platforms and the terminology used in content management systems.
- You may be asked to update a certain seed script. Because we're in development, frequent changes to the different configs happen. This regenerates the schema and payload types. So you will be given the updated payload types and schema to work with. Try to understand the changes and update the seed script accordingly.

## CODING STYLE AND STRUCTURE

- You should always check if we're working on the frontend or backend. You should be able to identify this based on the paths or other indications in the files provided to you.
- The file [@payload-types.ts](./src/payload-types.ts) is the typed database schema generated by the CMS. This makes it our source truth and only way to modify it is by using the CMS configurations. They are also quite useful as they can be imported for use in the project's code because it matches the database structure.
- For styling and design, we use the new Tailwind CSS v4 and Shadcn components to enhance the UI experience.
- For basic animations, we use tailwind. But for more complex animations, we use the `motion/react` library.
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs
- Write concise, technical TypeScript code with accurate examples